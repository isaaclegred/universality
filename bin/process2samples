#!/usr/bin/env python

"""generate samples from a set of EOS (a process)
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality.properties import samples

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('inpath', type=str)
rgroup.add_argument('outpath', type=str)

rgroup.add_argument('reference', type=str,
    help='the reference column')
rgroup.add_argument('columns', nargs='+', type=str,
    help='columns to extract')

rgroup.add_argument('-r', '--reference-value', default=[], type=float, action='append',
    help='the reference values at which we extract values from the EOS parameters. \
DEFAULT=[]')
rgroup.add_argument('-R', '--reference-value-column', default=[], type=str, action='append',
    help='look up the reference value from this column in the input data')


rgroup.add_argument('--selection-rule', default=samples.DEFAULT_SELECTION_RULE, type=str,
    help='the rule used to choose between multiple values if the the curves are not one-to-one. \
Must be one of: %s'%(', '.join(samples.KNOWN_SELECTION_RULES)))

rgroup.add_argument('--branches-basename', nargs=4, type=str, default=None,
    help='if specified, will only select from stable branches. This must be a basename template that points to a summary of stable branches \
along with column names to map the parameters in the eos files (--eos-basename) to the start/end parameters in the branches summary. \
Note that the column used to look up branches should be monotonically increasing so that it uniquely defines each branch according to the contained range. \
eg "--branches-basename \'branches_summary_template baryon_density start_central_baryon_density end_central_baryon_density"')

rgroup.add_argument('--branches-dir', default=None, type=str)

rgroup.add_argument('--default-value', nargs=2, type=str, action='append', default=[],
    help='the default value to return if the reference is not on a stable branch but --select-from-stable-branches is specified. \
Should be specified separately for each column that we wish to extract. eg "--default-value Lambda 0.0"')

rgroup.add_argument('-c', '--copy-column', default=[], type=str, action='append',
    help='copy over the values from this column. Can be repeated to specify multiple columns. If not specified, will copy over all columns by default.')

rgroup.add_argument('--overwrite', default=False, action='store_true',
    help='if specified, will overwrite columns to be extracted if they already exist')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)

# lookup arguments
lgroup = parser.add_argument_group('look-up arguments')
lgroup.add_argument('--eos-column', default='EoS', type=str)
lgroup.add_argument('--eos-dir', default='.', type=str)
lgroup.add_argument('--eos-num-per-dir', default=1000, type=int,
    help='the number of samples per directory')
lgroup.add_argument('--eos-basename', default='draw-foo-%d.csv', type=str,
    help='a string into which the EOS number can be substituted when building filenames.')

args = parser.parse_args()

if (not args.reference_value) and (not args.reference_value_column):
    raise RuntimeError('must supply at least one --reference-value or --reference-value-column')

### finish parsing
Ncol = len(args.columns)
Nref = len(args.reference_value)+len(args.reference_value_column)
Nkeep = len(args.copy_column)
args.reference_value.sort()

assert args.selection_rule in samples.KNOWN_SELECTION_RULES, '--selection-rule must be one of: %s'%(', '.join(samples.KNOWN_SELECTION_RULES))

default_value = dict((key, float(val)) for key, val in args.default_value)
if (args.branches_basename is not None):
    for column in args.columns:
        assert column in default_value, 'must specify --default-value for column=%s when --branches-basename is not None'%column

if args.branches_dir is None:
    args.branches_dir = args.eos_dir ### fall back if not specified otherwise

if os.path.dirname(args.outpath) and (not os.path.exists(os.path.dirname(args.outpath))):
    os.makedirs(os.path.dirname(args.outpath))

args.verbose |= args.Verbose

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.inpath)

### compute the new column names
newcols = samples.outputcolumns(args.columns, args.reference, reference_values=args.reference_value, reference_columns=args.reference_value_column)
### get the existing column names
oldcols = io.load_columns(args.inpath)

if Nkeep > 0: ### only aim to copy the  args.copy_column columns
    copycols = args.copy_column
else : ### we will try to copy all columns
    copycols = oldcols
    Nkeep =  len(oldcols) - 1

### This operation will probably be expensive, so it shouldn't be used
### all the time, but it's unsafe to not do it (i.e. not having such a check
### can leave .csv's in a very annoying state)
for column in newcols: ### need to check for duplicate columns
    if column in copycols: ### trying to copy a column that will be added
        if args.overwrite: # do not error
            Nkeep = Nkeep - 1 ### do not keep the duplicated column
            copycols.remove(column)
        else:
            raise ValueError("attempting to add  " + column + " which already exists in file, use --overwrite to explicitly not copy this column")


### load all of the data which is (1) specified and (2) will avoid column-name conflicts
### reference value columns will maybe be duplicated, as will the eos column
### this is fine because io.load will only load columns once, but when we add columns later
### no such check will be performed
data, cols = io.load(args.inpath, [args.eos_column] + copycols + args.reference_value_column,
                     max_num_samples=args.max_num_samples)

### the columns from which we extract refernce values
ref = np.empty((len(data), len(args.reference_value_column)), dtype=float)
for i, col in enumerate(args.reference_value_column):
    ref[:,i] = data[:,cols.index(col)]

if args.eos_column in copycols:
    copycols.remove(args.eos_column)
ind = 1+Nkeep
keep = data[:,:ind+1] ### the stuff we want to transfer over to the final file
data = data[:,0]
outcols = [args.eos_column] + copycols + newcols

N = len(data)

#------------------------

if args.verbose:
    print('extacting data at reference values')

ans = np.empty((N, 1+Nkeep+Nref*Ncol), dtype=float)
ans[:,:Nkeep+1] = keep ### fill in existing data

path_template = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', args.eos_basename)
if args.branches_basename is not None:
    basename, affine, start, stop = args.branches_basename
    branches_mapping = os.path.join(args.branches_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', basename), affine, start, stop
else:
    branches_mapping = None

    

ans[:,Nkeep+1:] = samples.process2samples(
    data,
    path_template,
    args.eos_num_per_dir,
    args.reference,
    args.columns,
    static_x_test=args.reference_value,
    dynamic_x_test=ref,
    verbose=args.Verbose,
    selection_rule=args.selection_rule,
    branches_mapping=branches_mapping,
    default_values=[default_value.get(col, None) for col in args.columns],
)


#------------------------

if args.verbose:
    print('writing samples to: '+args.outpath)
io.write(args.outpath, ans, outcols)
